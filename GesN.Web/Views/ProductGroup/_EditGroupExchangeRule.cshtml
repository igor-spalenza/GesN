@using GesN.Web.Models.ViewModels.Production
@model EditProductGroupExchangeRuleViewModel

<form id="formEditGroupExchangeRule" enctype="application/x-www-form-urlencoded">
    @Html.AntiForgeryToken()
    @Html.HiddenFor(m => m.Id)
    @Html.HiddenFor(m => m.ProductGroupId)
    
    <div class="row">
        <div class="col-md-6">
            <div class="floating-input-group">
                <input asp-for="SourceGroupItemId" type="hidden" />
                <input id="SourceGroupItemName" type="text" class="floating-input" placeholder=" " required autocomplete="off" />
                <label for="SourceGroupItemName" class="floating-label">Item Original</label>
                <span asp-validation-for="SourceGroupItemId" class="text-danger"></span>
            </div>
        </div>
        <div class="col-md-6">
            <div class="floating-input-group">
                <input asp-for="TargetGroupItemId" type="hidden" />
                <input id="TargetGroupItemName" type="text" class="floating-input" placeholder=" " required autocomplete="off" />
                <label for="TargetGroupItemName" class="floating-label">Item de Troca</label>
                <span asp-validation-for="TargetGroupItemId" class="text-danger"></span>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-md-6">
            <div class="floating-input-group">
                <input asp-for="ExchangeRatio" type="number" step="0.01" min="0.01" class="floating-input has-value" placeholder=" " required />
                <label asp-for="ExchangeRatio" class="floating-label">Proporção de Troca</label>
                <span asp-validation-for="ExchangeRatio" class="text-danger"></span>
                <small class="form-text text-muted">Ex: 1.5 significa 1 produto original = 1.5 produtos de troca</small>
            </div>
        </div>
        <div class="col-md-6">
            <div class="floating-input-group">
                <input asp-for="SourceGroupItemWeight" type="number" min="1" class="floating-input has-value" placeholder=" " required />
                <label asp-for="SourceGroupItemWeight" class="floating-label">Peso do Item Original</label>
                <span asp-validation-for="SourceGroupItemWeight" class="text-danger"></span>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-md-6">
            <div class="floating-input-group">
                <input asp-for="TargetGroupItemWeight" type="number" min="1" class="floating-input has-value" placeholder=" " required />
                <label asp-for="TargetGroupItemWeight" class="floating-label">Peso do Item de Troca</label>
                <span asp-validation-for="TargetGroupItemWeight" class="text-danger"></span>
            </div>
        </div>
        <div class="col-md-6">
            <!-- Space for additional fields if needed -->
        </div>
    </div>

    <div class="row">
        <div class="col-md-12">
            <div class="form-check">
                <input asp-for="IsActive" class="form-check-input" type="checkbox" />
                <label asp-for="IsActive" class="form-check-label">
                    Regra Ativa
                </label>
                <small class="form-text text-muted">Se marcado, esta regra estará disponível para uso</small>
            </div>
        </div>
    </div>

    <div class="alert alert-info">
        <h6><i class="fas fa-info-circle"></i> Informações sobre regras de troca:</h6>
        <ul class="mb-0">
            <li><strong>Proporção:</strong> Define quantos produtos de troca equivalem a 1 produto original</li>
            <li><strong>Custo Adicional:</strong> Valor extra cobrado na troca (opcional)</li>
            <li><strong>Status:</strong> Apenas regras ativas ficam disponíveis para o cliente</li>
        </ul>
    </div>
</form>

<script>
$(document).ready(function() {
    // Initialize autocomplete for SourceGroupItemName field
    const sourceGroupItemNameField = $('#SourceGroupItemName');
    const sourceGroupItemIdField = $('#SourceGroupItemId');
    
    if (sourceGroupItemNameField.length) {
        // Remove previous instance if exists
        if (sourceGroupItemNameField.data('aaAutocomplete')) {
            sourceGroupItemNameField.autocomplete.destroy();
        }

        // Initialize Algolia Autocomplete.js for Source Item
        const sourceAutocompleteInstance = autocomplete(sourceGroupItemNameField[0], {
            hint: false,
            debug: false,
            minLength: 2,
            openOnFocus: false,
            autoselect: true,
            appendTo: sourceGroupItemNameField.closest('.modal-body, .tab-pane, body')[0]
        }, [{
            source: function(query, callback) {
                const productGroupId = $('#ProductGroupId').val();
                $.ajax({
                    url: '/ProductGroup/BuscaGroupItemAutocomplete',
                    type: 'GET',
                    dataType: 'json',
                    data: { termo: query, productGroupId: productGroupId },
                    success: function(data) {
                        const suggestions = $.map(data, function(item) {
                            return {
                                label: item.label,
                                value: item.value,
                                id: item.id,
                                data: item
                            };
                        });
                        callback(suggestions);
                    },
                    error: function() {
                        callback([]);
                    }
                });
            },
            displayKey: 'label',
            templates: {
                suggestion: function(suggestion) {
                    return '<div class="autocomplete-suggestion">' +
                           '<div class="suggestion-title">' + suggestion.data.productName + '</div>' +
                           (suggestion.data.productSKU ? '<div class="suggestion-subtitle">SKU: ' + suggestion.data.productSKU + '</div>' : '') +
                           '<div class="suggestion-subtitle">Quantidade: ' + suggestion.data.weight + '</div>' +
                           '</div>';
                }
            }
        }]);

        // Handle selection for Source Item
        sourceAutocompleteInstance.on('autocomplete:selected', function(event, suggestion, dataset) {
            if (suggestion && suggestion.id) {
                sourceGroupItemIdField.val(suggestion.id);
                sourceGroupItemNameField.addClass('has-value');
                sourceGroupItemNameField.trigger('change');
            }
        });

        // Clear hidden field when input is cleared
        sourceGroupItemNameField.on('input', function() {
            if ($(this).val().trim() === '') {
                sourceGroupItemIdField.val('');
                $(this).removeClass('has-value');
            }
        });
    }

    // Initialize autocomplete for TargetGroupItemName field
    const targetGroupItemNameField = $('#TargetGroupItemName');
    const targetGroupItemIdField = $('#TargetGroupItemId');
    
    if (targetGroupItemNameField.length) {
        // Remove previous instance if exists
        if (targetGroupItemNameField.data('aaAutocomplete')) {
            targetGroupItemNameField.autocomplete.destroy();
        }

        // Initialize Algolia Autocomplete.js for Target Item
        const targetAutocompleteInstance = autocomplete(targetGroupItemNameField[0], {
            hint: false,
            debug: false,
            minLength: 2,
            openOnFocus: false,
            autoselect: true,
            appendTo: targetGroupItemNameField.closest('.modal-body, .tab-pane, body')[0]
        }, [{
            source: function(query, callback) {
                const productGroupId = $('#ProductGroupId').val();
                $.ajax({
                    url: '/ProductGroup/BuscaGroupItemAutocomplete',
                    type: 'GET',
                    dataType: 'json',
                    data: { termo: query, productGroupId: productGroupId },
                    success: function(data) {
                        const suggestions = $.map(data, function(item) {
                            return {
                                label: item.label,
                                value: item.value,
                                id: item.id,
                                data: item
                            };
                        });
                        callback(suggestions);
                    },
                    error: function() {
                        callback([]);
                    }
                });
            },
            displayKey: 'label',
            templates: {
                suggestion: function(suggestion) {
                    return '<div class="autocomplete-suggestion">' +
                           '<div class="suggestion-title">' + suggestion.data.productName + '</div>' +
                           (suggestion.data.productSKU ? '<div class="suggestion-subtitle">SKU: ' + suggestion.data.productSKU + '</div>' : '') +
                           '<div class="suggestion-subtitle">Quantidade: ' + suggestion.data.weight + '</div>' +
                           '</div>';
                }
            }
        }]);

        // Handle selection for Target Item
        targetAutocompleteInstance.on('autocomplete:selected', function(event, suggestion, dataset) {
            if (suggestion && suggestion.id) {
                targetGroupItemIdField.val(suggestion.id);
                targetGroupItemNameField.addClass('has-value');
                targetGroupItemNameField.trigger('change');
            }
        });

        // Clear hidden field when input is cleared
        targetGroupItemNameField.on('input', function() {
            if ($(this).val().trim() === '') {
                targetGroupItemIdField.val('');
                $(this).removeClass('has-value');
            }
        });
    }
});
</script> 