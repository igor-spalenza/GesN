@using GesN.Web.Models.ViewModels.Production
@model CreateProductGroupItemViewModel

<div class="modal fade" id="createGroupItemModal" tabindex="-1" role="dialog" aria-labelledby="createGroupItemModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="createGroupItemModalLabel">
                    <i class="fas fa-plus"></i> Adicionar Item ao Grupo
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Fechar"></button>
            </div>
            <div class="modal-body">
                <form id="formCreateGroupItem" enctype="application/x-www-form-urlencoded">
                    @Html.AntiForgeryToken()
                    @Html.HiddenFor(m => m.ProductGroupId)
                    
                    @* Debug info - remover após correção *@
                    @if (!string.IsNullOrEmpty(Model.ProductGroupId))
                    {
                        <input type="hidden" id="debugProductGroupId" value="@Model.ProductGroupId" />
                        <!-- DEBUG: ProductGroupId = @Model.ProductGroupId -->
                    }
                    
                    <div class="row">
                        <div class="col-md-12">
                            <div class="form-check-group mb-3">
                                <div class="form-check form-check-inline">
                                    <input class="form-check-input" type="radio" name="itemType" id="itemTypeProduct" value="Produto" checked />
                                    <label class="form-check-label" for="itemTypeProduct">
                                        Produto Específico
                                    </label>
                                </div>
                                <div class="form-check form-check-inline">
                                    <input class="form-check-input" type="radio" name="itemType" id="itemTypeCategory" value="Categoria" />
                                    <label class="form-check-label" for="itemTypeCategory">
                                        Categoria de Produtos
                                    </label>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="row" id="productSelection">
                        <div class="col-md-12">
                            <div class="floating-input-group">
                                <input asp-for="ProductId" type="hidden" />
                                <input id="ProductName" type="text" class="floating-input" placeholder=" " autocomplete="off" />
                                <label for="ProductName" class="floating-label">Produto</label>
                                <span asp-validation-for="ProductId" class="text-danger"></span>
                            </div>
                        </div>
                    </div>

                    <div class="row" id="categorySelection" style="display: none;">
                        <div class="col-md-12">
                            <div class="floating-input-group">
                                <input asp-for="ProductCategoryId" type="hidden" />
                                <input id="ProductCategoryName" type="text" class="floating-input" placeholder=" " autocomplete="off" />
                                <label for="ProductCategoryName" class="floating-label">Categoria de Produto</label>
                                <span asp-validation-for="ProductCategoryId" class="text-danger"></span>
                            </div>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-md-4">
                            <div class="floating-input-group">
                                <input asp-for="Quantity" type="number" min="1" class="floating-input" placeholder=" " required />
                                <label asp-for="Quantity" class="floating-label">Quantidade</label>
                                <span asp-validation-for="Quantity" class="text-danger"></span>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="floating-input-group">
                                <input asp-for="MinQuantity" type="number" min="0" class="floating-input" placeholder=" " />
                                <label asp-for="MinQuantity" class="floating-label">Quantidade Mínima</label>
                                <span asp-validation-for="MinQuantity" class="text-danger"></span>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="floating-input-group">
                                <input asp-for="MaxQuantity" type="number" min="0" class="floating-input" placeholder=" " />
                                <label asp-for="MaxQuantity" class="floating-label">Quantidade Máxima</label>
                                <span asp-validation-for="MaxQuantity" class="text-danger"></span>
                                <small class="form-text text-muted mt-1">Deixe vazio para ilimitado</small>
                            </div>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-md-6">
                            <div class="floating-input-group">
                                <input asp-for="DefaultQuantity" type="number" min="0" class="floating-input" placeholder=" " />
                                <label asp-for="DefaultQuantity" class="floating-label">Quantidade Padrão</label>
                                <span asp-validation-for="DefaultQuantity" class="text-danger"></span>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="floating-input-group floating-input-group-addon">
                                <span class="input-group-text">R$</span>
                                <input asp-for="ExtraPrice" type="number" step="0.01" min="0" class="floating-input" placeholder=" " />
                                <label asp-for="ExtraPrice" class="floating-label">Preço Extra</label>
                                <span asp-validation-for="ExtraPrice" class="text-danger"></span>
                            </div>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-md-12">
                            <div class="form-check">
                                <input asp-for="IsOptional" class="form-check-input" type="checkbox" />
                                <label asp-for="IsOptional" class="form-check-label">
                                    Item Opcional
                                </label>
                                <small class="form-text text-muted">Se marcado, este item não será obrigatório no grupo</small>
                            </div>
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                    <i class="fas fa-times"></i> Cancelar
                </button>
                <button type="button" class="btn btn-primary" id="btnSaveGroupItem">
                    <i class="fas fa-save"></i> Salvar
                </button>
            </div>
        </div>
    </div>
</div>

<script>
$(document).ready(function() {
    // Handle item type change
    $('input[name="itemType"]').on('change', function() {
        const selectedType = $(this).val();
        
        if (selectedType === 'Produto') {
            $('#productSelection').show();
            $('#categorySelection').hide();
            $('#ProductId').val('');
            $('#ProductName').val('').removeClass('has-value');
            $('#ProductCategoryId').val('');
            $('#ProductCategoryName').val('').removeClass('has-value');
        } else if (selectedType === 'Categoria') {
            $('#productSelection').hide();
            $('#categorySelection').show();
            $('#ProductId').val('');
            $('#ProductName').val('').removeClass('has-value');
            $('#ProductCategoryId').val('');
            $('#ProductCategoryName').val('').removeClass('has-value');
        }
    });

    // Initialize ProductCategory autocomplete
    const categoryNameField = $('#ProductCategoryName');
    const categoryIdField = $('#ProductCategoryId');
    
    if (categoryNameField.length) {
        // Initialize Algolia Autocomplete.js for Product Category
        const categoryAutocompleteInstance = autocomplete(categoryNameField[0], {
            hint: false,
            debug: false,
            minLength: 2,
            openOnFocus: false,
            autoselect: true,
            appendTo: categoryNameField.closest('.modal-body, .tab-pane, body')[0]
        }, [{
            source: function(query, callback) {
                $.ajax({
                    url: '/ProductCategory/BuscaProductCategoryAutocomplete',
                    type: 'GET',
                    dataType: 'json',
                    data: { termo: query },
                    success: function(data) {
                        const suggestions = $.map(data, function(item) {
                            return {
                                label: item.name || item.label,
                                value: item.name || item.label,
                                id: item.id,
                                data: item
                            };
                        });
                        callback(suggestions);
                    },
                    error: function() {
                        callback([]);
                    }
                });
            },
            displayKey: 'label',
            templates: {
                suggestion: function(suggestion) {
                    return '<div class="autocomplete-suggestion">' +
                           '<div class="suggestion-title">' + (suggestion.data.name || suggestion.label) + '</div>' +
                           (suggestion.data.description ? '<div class="suggestion-subtitle">' + suggestion.data.description + '</div>' : '') +
                           '</div>';
                }
            }
        }]);

        // Handle selection for Category
        categoryAutocompleteInstance.on('autocomplete:selected', function(event, suggestion, dataset) {
            if (suggestion && suggestion.id) {
                categoryIdField.val(suggestion.id);
                categoryNameField.addClass('has-value');
                categoryNameField.trigger('change');
            }
        });

        // Clear hidden field when input is cleared
        categoryNameField.on('input', function() {
            if ($(this).val().trim() === '') {
                categoryIdField.val('');
                $(this).removeClass('has-value');
            }
        });
    }
});
</script>

 