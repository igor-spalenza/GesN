@using GesN.Web.Models.ViewModels.Production
@model EditProductViewModel

<form id="formEditProduct" enctype="application/x-www-form-urlencoded">
    @Html.AntiForgeryToken()
    @Html.HiddenFor(m => m.Id)
    @Html.HiddenFor(m => m.ProductType)
    
    <!-- Informações Básicas -->
    <div class="card">
        <div class="card-header">
            <h6 class="card-title mb-0">
                <i class="fas fa-box"></i> Informações Básicas
            </h6>
        </div>
        <div class="card-body">
            <div class="row">
                <div class="col-md-4">
                    <div class="mb-3">
                        <label asp-for="Code" class="form-label"></label>
                        <input asp-for="Code" class="form-control" placeholder="Código único do produto" required />
                        <span asp-validation-for="Code" class="text-danger"></span>
                    </div>
                </div>
                <div class="col-md-8">
                    <div class="mb-3">
                        <label asp-for="Name" class="form-label"></label>
                        <input asp-for="Name" class="form-control" placeholder="Nome do produto" required />
                        <span asp-validation-for="Name" class="text-danger"></span>
                    </div>
                </div>
            </div>
            
            <div class="row">
                <div class="col-md-12">
                    <div class="mb-3">
                        <label asp-for="Description" class="form-label"></label>
                        <textarea asp-for="Description" class="form-control" rows="2" placeholder="Descrição do produto"></textarea>
                        <span asp-validation-for="Description" class="text-danger"></span>
                    </div>
                </div>
            </div>

            <div class="row">
                <div class="col-md-4">
                    <div class="mb-3">
                        <label class="form-label">Tipo de Produto</label>
                        <input type="text" class="form-control" value="@Model.ProductTypeDisplay" readonly />
                        <small class="form-text text-muted">O tipo não pode ser alterado após a criação</small>
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="mb-3">
                        <label asp-for="CategoryId" class="form-label"></label>
                        <select asp-for="CategoryId" class="form-select">
                            <option value="">Selecione uma categoria</option>
                            @foreach (var category in Model.AvailableCategories)
                            {
                                <option value="@category.Value" selected="@category.IsSelected">@category.Text</option>
                            }
                        </select>
                        <span asp-validation-for="CategoryId" class="text-danger"></span>
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="mb-3">
                        <label asp-for="Unit" class="form-label"></label>
                        <input asp-for="Unit" class="form-control" placeholder="Ex: UN, KG, L" />
                        <span asp-validation-for="Unit" class="text-danger"></span>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Preços e Custos -->
    <div class="card mt-3">
        <div class="card-header">
            <h6 class="card-title mb-0">
                <i class="fas fa-dollar-sign"></i> Preços e Custos
            </h6>
        </div>
        <div class="card-body">
            <div class="row">
                <div class="col-md-6">
                    <div class="mb-3">
                        <label asp-for="Price" class="form-label"></label>
                        <div class="input-group">
                            <span class="input-group-text">R$</span>
                            <input asp-for="Price" type="number" step="0.01" class="form-control" placeholder="0,00" />
                        </div>
                        <span asp-validation-for="Price" class="text-danger"></span>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="mb-3">
                        <label asp-for="Cost" class="form-label"></label>
                        <div class="input-group">
                            <span class="input-group-text">R$</span>
                            <input asp-for="Cost" type="number" step="0.01" class="form-control" placeholder="0,00" />
                        </div>
                        <span asp-validation-for="Cost" class="text-danger"></span>
                    </div>
                </div>
            </div>
            
            @if (Model.Price.HasValue && Model.Cost.HasValue)
            {
                <div class="row">
                    <div class="col-md-12">
                        <div class="alert alert-info">
                            <strong>Margem de Lucro:</strong> 
                            <span id="marginDisplay">@Model.ProfitMarginDisplay</span>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>

    <!-- Controle de Estoque -->
    <div class="card mt-3">
        <div class="card-header">
            <h6 class="card-title mb-0">
                <i class="fas fa-warehouse"></i> Controle de Estoque
            </h6>
        </div>
        <div class="card-body">
            <div class="row">
                <div class="col-md-6">
                    <div class="mb-3">
                        <label asp-for="CurrentStock" class="form-label"></label>
                        <input asp-for="CurrentStock" type="number" class="form-control" placeholder="0" />
                        <span asp-validation-for="CurrentStock" class="text-danger"></span>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="mb-3">
                        <label asp-for="MinStock" class="form-label"></label>
                        <input asp-for="MinStock" type="number" class="form-control" placeholder="0" />
                        <span asp-validation-for="MinStock" class="text-danger"></span>
                        <small class="form-text text-muted">Estoque mínimo para alertas</small>
                    </div>
                </div>
            </div>
            
            <!-- Indicador visual do estoque -->
            <div class="row">
                <div class="col-md-12">
                    <div id="stockIndicator" class="alert d-none">
                        <!-- Será preenchido via JavaScript -->
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Campos específicos por tipo de produto -->
    @if (Model.ProductType == GesN.Web.Models.Enumerators.ProductType.Composite)
    {
        <div class="card mt-3">
            <div class="card-header">
                <h6 class="card-title mb-0">
                    <i class="fas fa-cogs"></i> Configurações de Produto Composto
                </h6>
            </div>
            <div class="card-body">
                <div class="row">
                    <div class="col-md-6">
                        <div class="mb-3">
                            <label asp-for="AssemblyTime" class="form-label">Tempo de Montagem (min)</label>
                            <input asp-for="AssemblyTime" class="form-control" type="number" min="0" />
                            <span asp-validation-for="AssemblyTime" class="text-danger"></span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }

    @if (Model.ProductType == GesN.Web.Models.Enumerators.ProductType.Group)
    {
        <div class="card mt-3">
            <div class="card-header">
                <h6 class="card-title mb-0">
                    <i class="fas fa-layer-group"></i> Configurações de Grupo de Produtos
                </h6>
            </div>
            <div class="card-body">
                <div class="row">
                    <div class="col-md-3">
                        <label asp-for="MinItemsRequired" class="form-label">Min. Itens Obrigatórios</label>
                        <input asp-for="MinItemsRequired" class="form-control" type="number" min="0" />
                        <span asp-validation-for="MinItemsRequired" class="text-danger"></span>
                    </div>
                    <div class="col-md-3">
                        <label asp-for="MaxItemsAllowed" class="form-label">Max. Itens Permitidos</label>
                        <input asp-for="MaxItemsAllowed" class="form-control" type="number" min="1" />
                        <span asp-validation-for="MaxItemsAllowed" class="text-danger"></span>
                        <div class="form-text">Deixe vazio para ilimitado</div>
                    </div>
                </div>
            </div>
        </div>
    }

    <!-- Status -->
    <div class="card mt-3">
        <div class="card-header">
            <h6 class="card-title mb-0">
                <i class="fas fa-toggle-on"></i> Status
            </h6>
        </div>
        <div class="card-body">
            <div class="row">
                <div class="col-md-6">
                    <div class="form-check form-switch">
                        <input class="form-check-input" type="checkbox" asp-for="StateCode" value="1" />
                        <label class="form-check-label" asp-for="StateCode">
                            Produto Ativo
                        </label>
                    </div>
                </div>
            </div>
        </div>
    </div>
</form>

<script>
    $(document).ready(function() {
        // Calcular margem de lucro automaticamente
        function calcularMargemLucro() {
            const preco = parseFloat($('#Price').val()) || 0;
            const custo = parseFloat($('#Cost').val()) || 0;
            
            if (preco > 0 && custo > 0) {
                const margem = ((preco - custo) / preco * 100);
                $('#marginDisplay').text(margem.toFixed(2) + '%');
                $('#marginDisplay').parent().removeClass('d-none');
            } else {
                $('#marginDisplay').parent().addClass('d-none');
            }
        }
        
        // Atualizar indicador de estoque
        function atualizarIndicadorEstoque() {
            const estoqueAtual = parseInt($('#CurrentStock').val()) || 0;
            const estoqueMinimo = parseInt($('#MinStock').val()) || 0;
            const indicator = $('#stockIndicator');
            
            if (estoqueMinimo > 0) {
                if (estoqueAtual <= estoqueMinimo) {
                    indicator.removeClass('d-none alert-warning alert-success')
                           .addClass('alert-danger')
                           .html('<i class="fas fa-exclamation-triangle"></i> <strong>Estoque Crítico!</strong> Estoque atual está abaixo do mínimo.');
                } else if (estoqueAtual <= (estoqueMinimo * 1.2)) {
                    indicator.removeClass('d-none alert-danger alert-success')
                           .addClass('alert-warning')
                           .html('<i class="fas fa-exclamation"></i> <strong>Atenção:</strong> Estoque próximo do mínimo.');
                } else {
                    indicator.removeClass('d-none alert-danger alert-warning')
                           .addClass('alert-success')
                           .html('<i class="fas fa-check"></i> <strong>Estoque OK:</strong> Níveis adequados.');
                }
            } else {
                indicator.addClass('d-none');
            }
        }
        
        // Eventos
        $('#Price, #Cost').on('input', calcularMargemLucro);
        $('#CurrentStock, #MinStock').on('input', atualizarIndicadorEstoque);
        
        // Executar na inicialização
        calcularMargemLucro();
        atualizarIndicadorEstoque();
    });
</script> 